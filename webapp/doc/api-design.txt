AUTHOR: Etienne Richart

REQUEST: /api/help/
RESPONSE: Returns an html page with this document and the database schema included.

REQUEST: /api/features/
RESPONSE: An JSON list of dictionaries, each which represent a feature.
Each feature dictionary will have the following fields.
    name -- (string) the name of the feature
    type -- (string) the type of the feature
    table -- (string) what table it belongs to in the database
EXAMPLE:
    /api/features 
        [{name:"id", type:"integer", table:"astronaut_mission"}, ...]

REQUEST: /api/astronauts/raw/
GET PARAMETERS: 
    order {Optional, list of features to sort by, default='id'} feature names to be checked for SQL injection then added in the ORDER BY block of the query
RESPONSE: a JSON list of dictionaries each of which repressents one astronaut, sorted by id or {order}.
Each astronaut dictionary will have all the following fields.
    id -- (int)  the id of the astronaut in the database
    english_name -- (string) the astronaut's English name
    original_name -- (string) the astronaut's name in their original language (ex: Russion, Chinese)
    nwnumber -- (int) the order of the astronaut in their nation (ex: Yuri Gagarin is 1 for Russia/U.S.S.R)
    sex -- (char) the astronaut's gender (M or F)
    yob -- (int) the astronaut's year of birth
    nationality -- (string) the astronaut's nationality
    mil_civ -- (string) Mil if the astronaut was in the military, Civ if the astronaut was a civilian
    yos -- (int) The year the astronaut was selected to become an astronaut
    total_missions -- (int) the total number of missions the astronaut has participated in.
    total_mission_hours -- (double) the total number of hours the astronaut was on mission.
    total_eva_hours -- (double) the astronaut's total extravehicular time.
EXAMPLE:
    /api/astronauts/raw?order=id
        [{id:1, english_name:"Gagarin, Yuri", ...}, ...]

REQUEST: /api/astronauts/list/
GET PARAMETERS:
    order {optional, order to sort list by either name or year selected, default is name}
RESPONSE: a JSON list of dictionaries, each of which represents one astronaut. Each astronaut will have the following fields.
    english_name -- (string) the astronaut's English name
    yos -- (int) The year the astronaut was selected to become an astronaut
    nationality -- (string) the astronaut's nationality
    country_code -- (string) the astronaut's nation's country code
EXAMPLE:
    /api/astronauts/list/?order=name
        [{english_name:"Acaba, Joseph M.", yow:2004, nationality:"U.S.", country_code:"us"}, ...]

REQUEST: /api/missions/raw/
GET PARAMETERS: 
    order {Optional, list of features to sort by, default='id'} feature names to be checked for SQL injection then added in the ORDER BY block of the query
RESPONSE: a JSON list of dictionaries, each of which repressents one mission, sorted by id or {order}.
Each mission dictionary will have all the following fields.
    id -- (int) the id of the mission in the database
    title -- (string) the name of the mission
    mission_year -- (int) year of the mission
    ascent -- (string) the name of the craft used to ascend into space
    orbit -- (string) the name of the craft used while in orbit
    descent -- (string) the name of the craft used to return from space
    duration -- (string) the length of the mission in hours
    combined_eva -- (string) the sum of each astronaut's EVA time on the mission
    composition -- (string) Mil if all the members of the mission were military, Civ if all the members of the mission were civilian and mil/civ if it is a combination.
EXAMPLE:
    /api/missions/raw?order=id
        [{id:1, title:"Vostok 1", ...}, ...]

REQUEST: /api/missions/list/
GET PARAMETERS:
    order {optional, order to sort list by either mission title or mission year, default is title}
RESPONSE: a JSON list of dictionaries, each of which represents one mission.. Each mission will have the following fields.
    title -- (string) the name of the mission
    year -- (int) the year of the mission
EXAMPLE:
    /api/missions/list?order=year
        [{title:"Vostok 1", year=1961}, ...]

REQUEST: /api/search/
RESPONSE: A list of all the astronauts' english_name and original_name, all the mission names, and all the craft names a user could search for.
EXAMPLE:
    /api/search/
        [["", "Onufrienko, Yuri", "राकेश शर्मा", ...]

REQUEST: /api/profile/<name>
RESPONSE: an html page with either an astronaut profile, mission profile or craft profile.

REQUEST: /api/graphing/
GET PARAMETERS:
    x {optional, the feature on the x axis of the graph, default is nationality.nation}
    y {optional the feature on the y axis of the graph, default is astronauts.id}
    aggregate {optional, how to aggregate y SUM or COUNT, default is COUNT}
    order {optional if the order is ascending or decending, default is ''}
    query {optional the WHERE clause, defaul is ''}
RESPONSE: a list of barchart columns dictionary.
Each column dictionary will have the following fields.
    x -- (string) the x value of column on the chart
    y -- (string) the y value of the column on the chart 
EXAMPLE:
    /api/graphing/?x=nationality.nation&y=astronauts.total_eva_hours&aggregate=SUM&order=DESC&query=astronauts.nationality = nationality.id
        [{x:"U.S.", y:"2976.38"}, ...]