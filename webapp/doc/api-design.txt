Author: Etienne Richart


REQUEST: /features/
RESPONSE: An JSON list of dictionaries, each which represent a feature.
Each feature dictionary will have the following fields.
    Feature Name -- (string) the name of the feature
    Feature Type -- (string) the type of the feature
    Tabke -- (string) what table it belongs to in the db
EXAMPLE:
    /api/features 
        [{name:"id", type:"integer", table:"astronaut_mission"}, ...]

REQUEST: /astronauts/raw/
GET PARAMETERS: 
    order {Optional, list of features to sort by, default='id'} feature names to be checked for sql injection then added in the ORDER BY block of the query
RESPONSE: a JSON list of dictionaries each of which repressents one astronaut, sorted by id or {show}.
Each astronaut dictionary may have all the following fields or just some as indicated by {features}.
    Name -- (string) the astronaut's name
    Original Name -- (string) the astronaut's name in their original language (ex: Russion, Chinese)
    Nationwide Number -- (int) the order of the astronaut in their nation (ex: Yuri Gagarin is 1 for Russia/U.S.S.R)
    Sex -- (string) the astronaut's gender
    Year of Birth -- (int) the astronaut's YOB
    Nationality -- (string) the astronaut's nationality
    Mil/Civ -- (string) Mil if the astronaut was in the military, Civ if the astronaut was a civilian
    Year of Selection -- (int) The year the astronaut was selected to become an astronaut
    Total number of missions -- (int) the total number of missions the astronaut participated in.
    Total mission hours -- (double) the total number of hours the astronaut was in space.
    Total EVA hrs -- (double) the astronaut's total extravehicular time.
    Missions -- (array/list (string)) list of the missions the astronaut was on
    Mission Years -- (array/list (int)) list of the years the astronaut had a mission
    Occupations -- (array/list (string)) list of different roles the astronaut had on missions
EXAMPLE:
    /api/astronauts/raw?order=id
        [{id:1, english_name:"Gagarin, Yuri", ...}, ...]

REQUEST: /missions/raw/
GET PARAMETERS: 
    sort {Optional, list of features to sort by, default='id'} feature names to be checked for sql injection then added in the ORDER BY block of the query
RESPONSE: a JSON list of dictionaries, each of which repressents one mission, sorted by id or {show}.
Each astronaut dictionary may have all the following fields or just some as indicated by {features}.
    Mission Title -- (string) the name of the mission
    Mission Year -- (int) year of the mission
    Ascent Shuttle -- (string) the shuttle used to ascend into space
    Orbit -- (string) the craft used while in orbit
    Descent Shuttle -- (string) the shuttle used to return from space
    Mission Length (hours) -- (double) the duration of the mission
    Combined EVA hours -- (double) the sum of each astronaut's EVA time on the mission
    Astronauts -- (array/list (string)) the names of the astronauts on the mission
    Occupations -- (array/list (string)) the jobs the astronauts had on the mission.
    Composition -- (string) Mil if all the members of the mission were military, Civ if all the members of the mission were civilian and Mil/Civ if it is a combination.
EXAMPLE:
    /api/missions/raw?order=id
        [{id:1, title:"Vostok 1", ...}, ...]

REQUEST: /graphing
GET PARAMETERS:
    x {optional, the feature on the x axis of the graph, default is nationality.nation}
    y {optional the feature on the y axis of the graph, default is astronauts.id}
    aggregate {optional, how to aggregate y SUM or COUNT, default is COUNT}
    order {optional if the order is ascending or decending}
RESPONSE: a javascript libaray graph with GROUP BY x  on the x axis and {aggregate}(y) on the y axis sorted by y in {order} order.
EXAMPLE:
    /api/graphing/?x=nationality.nation&y=astronauts.id
        [{x:"UAE", y:1}, ...]

REQUEST: /astronauts/list/
GET PARAMETERS:
    order {optional, order to sort list by either name or year selected, default is name}
RESPONSE: a JSON list of dictionaries, each of which represents one astronaut. Each astronaut will have the following fields.
    Name -- (string) the astronaut's name
    Year of Selection -- (int) The year the astronaut was selected to become an astronaut
    Nationality -- (string) the astronaut's nationality

REQUEST: /missions/list/
GET PARAMETERS:
    order {optional, order to sort list by either mission title or mission year, default is title}
RESPONSE: a JSON list of dictionaries, each of which represents one mission.. Each mission will have the following fields.
    Mission Title -- (string) the name of the mission
    Mission Year -- (int) year of the mission


REQUEST: /astronauts/<name>
RESPONSE: a JSON dictionary, which repressents the astronaut.
The dictionary will have the following fields.
    Name -- (string) the astronaut's name
    Original Name -- (string) the astronaut's name in their original language (ex: Russion, Chinese)
    Nationwide Number -- (int) the order of the astronaut in their nation (ex: Yuri Gagarin is 1 for Russia/U.S.S.R)
    Sex -- (string) the astronaut's gender
    Year of Birth -- (int) the astronaut's YOB
    Nationality -- (string) the astronaut's nationality
    Mil/Civ -- (string) Mil if the astronaut was in the military, Civ if the astronaut was a civilian
    Year of Selection -- (int) The year the astronaut was selected to become an astronaut
    Total number of missions -- (int) the total number of missions the astronaut participated in.
    Total mission hours -- (double) the total number of hours the astronaut was in space.
    Total EVA hrs -- (double) the astronaut's total extravehicular time.
    Astronauts -- (array/list (dictionary)) dictionary of the astronaut on the missions
        Mission Year -- (int) year of the mission
        Mission Length (hours) -- (double) the duration of the mission
        Occupations -- (string) role on the mission
        EVA hrs -- (double) extravehicular hours on the mission
        Crewmates -- (array/list (string)) list of crewmate names on the mission
    Summary -- (string) Using the wikipedia API pass a summary of the astronaut

REQUEST: /missions/<title>
RESPONSE: a JSON dictionary, which repressents the mission.
The dictionary will have the following fields. 
    Mission Title -- (string) the name of the mission
    Mission Year -- (int) year of the mission
    Ascent Shuttle -- (string) the shuttle used to ascend into space
    Orbit -- (string) the craft used while in orbit
    Descent Shuttle -- (string) the shuttle used to return from space
    Mission Length (hours) -- (double) the duration of the mission
    Combined EVA hours -- (double) the sum of each astronaut's EVA time on the mission
    Composition -- (string) Mil if all the members of the mission were military, Civ if all the members of the mission were civilian and Mil/Civ if it is a combination.
    Astronauts -- (array/list (dictionaries)) list of the astronaut dictionaries on the mission
        Name -- (string) astronaut name
        Year of Selection -- (int) The year the astronaut was selected to become an astronaut
        Selection -- (string) the group from which the astronaut was selected for the mission
        Occupation -- (string) role on the mission
        EVA hrs -- (double) extravehicular hours on the mission
        Mil/Civ -- (string) Mil if the astronaut was in the military, Civ if the astronaut was a civilian
        Nationality -- (string) the astronaut's nationality
        Mission Number -- (int) the total number of mission's the astronaut has been upto and including this mission.
    Summary -- (string) Using the wikipedia API pass a summary of the mission 

REQUEST: /search/<query>
RESPONSE: a JSON list, of dictionaries, each of which repressents a close match to the search.
Each dictionary will have the following fields.
    Title --(string) An astronaut name, mission title or space craft name.
    Link --(string) the formatted request for the information in the title. If it an astronaut 'astronaut/<astronaut name>' if a space craft would be 'missions/<mission that used space craft title>'